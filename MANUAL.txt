A brief description of each of the macros, input file
names, and how they interact



After using 'make' to compile Muon_GUORE.cc into an executable, we can
begin the simulation phase. The executable requires two inputs: a
macro, and a number. The macro should handle primary particle
generation, and the input number will act as the seed for the
simulation's random number generator. An example set of commands to
make this happen would be:

1a. >) make
2a. >) ./Muon_GUORE muons.mac 309841 //user defined input seed

muons.mac generates high energy but monoenergetic muons, and Co60.mac
generates stationary Cobalt 60 nuclei. weighted.mac (the recommended
macro for execution at this time) samples a file of 90,000 muons
simulated by Ralph Massarczyk from ground level to the 4850 level at
SURF. This file is also in the mac/ directory for ease of access and
is titled SmallMuonFile. For more information, check out the macros
yourself. To better understand what's in the simulation, you can read
the .cc file.


I made a script, simulationbatch1_.qsub, to use the qsub batch
submission protocols for running multiple simulations at a time. This
script also randomizes the input number for the simulation. If your
institution uses a different job submission protocol, you'll have to
create your own script, keeping in mind that the script should feed a
macro name and a random number into the Muon_Guore executable as
indicated on step 2a up above. I also made a quick root script, called
jobsubmit, which will use simulationbatch1_.qsub to submit 100
simulations jobs at a time through qsub. So in reality, my first few
commands are:

1b. >)make
2b. >)qsub simulationbatch1_.qsub //single job, random input seed

OR

1c. >)make
2c. >)root -x jobsubmit.C //Recommended, 100 jobs & 100 random input seeds

This will get 100 batches of 100 muons each (10,000 total) to start
simulating using the weighted.mac parameters. Pretty simple, huh?



After the main MUON_GUORE executable is ran, it should output a .root
file with the name 'output#####.root', where the #s are equal to the
input seed. This is where the so called 'processing' phase begins. At
present the processing involves 3 steps: event building, hit
selection/energy summing, and optionally, chaining together of all
summed files.


The neweventbuilder.C script automatically finds all output#####.root
files in the current directory and builds 'events' out of
them. Currently, events are defined as all of the energy depositions
from the simulation file that occur in the same active volume
(i.e. the same detector) within a 20us time window. It's important to
note the event builder also processes each muon individually, so no
event has depositions from two separate muons. I've thoroughly
documented how neweventbuilder.C works in the program itself, so check
that out if you'd like. The output files from the event builder are
named bundledoutput####.root, where the number in the filename is the
same as the simulation file it was built from. The bundledoutput files
have a messy internal structure, but this is tolerable for now because
their only current use is as input for the next step in the processing
phase: summing.

3a. >)root -x neweventbuilder.C //No longer works

VERY IMPORTANT UPDATE: event building usually takes about 5 minutes
for a single simulation file, but can take as long as a day or
more. As such, it's not advisable to process all files in the current
directory at a time. As you may recall, simulation files are all
tagged with a unique number in their name, e.g. output#####.root. To
work around the processing time issue, I now require neweventbuilder.C
to take a numerical input. Then, only simulation files whose unique
number begins with the same digits as the input number will be
processed.

If this is confusing here's an example. I run root -x
neweventbuilder.C(544), so 544 is the numerical input. Now, if a
simulation file is named output544.root, it will be processed. BUT it
will also be processed if it's named output5448189.root, or
output544603.root, etc, so long as the first three numbers in its
unique ID match the numerical input. output1654436.root would not be
processed, because while it does contain '544' in its unique ID, it is
not the first sequence of digits.

3b. >)root -x neweventbuilder.C(anynumber) //Recommend anynumber be 3 digits

I made another batch submission script, manysub.qsub, and another
accompanying root file to submit it many times, manysubmit.C. I would
highly recommend using these to do any event building, or to build
your own batch submission script. manysubmit.C submits every possible
combination of starting digits for the simulation files' unique IDs,
so every file gets processed, but now the labor is split across many
machines.

3c. >) root -x manysubmit.C //Highly recommended


The hit selection/energy summing program is called summing.C It takes
the neweventbuilder.C output as its input. This somewhat simpler
program builds hits as per the MAJORANA definition, and calculates hit
energy (per detector, which can then be added) and multiplicity for
each hit. The output of summing.C is labeled sumtree#####.C, where
again the number carries over from the original simulation file's
number. summing.C takes very little time to process any number of
files.

As a final step, to make high statistics analysis easier, the user may
use the program chaining.C. This simply uses a TChain to merge all
sumtree files into a single file, which is then titled
allsums.root. Simple analysis can then be done easily on
allsums.root. For details on parameter names for analysis, please read
summing.C's source code. Analysis macros are in development.



Below are exactly the commands I would run to complete the simulations
and analysis process from start to finish for 10,000 muons. First, you
will need to copy a folder from my home directory. I've listed the
path below this paragraph in step 0. This folder, mac, contains some
files referenced by other parts of this module which are too large to
store on github, as well as the .mac files the simulation takes as an
argument.



//Change to the directory containing the Muon_GUORE.cc file, make sure
cmake has been used to set it up initially

//Copy a necessary folder with the following command :

0a. >)cp -f /home/CJ.Barton/Muon_GUORE/Truon_GUORE/mac .

//Optionally, copy the Copy folder and rename it
//This should be the directory from which you run steps 2. to 5.


The following locations have file paths that will need to be changed
to reflect your setup:

src/ShowerGenerator.cc has a path you can find by searching for
'Truon_GUORE' in a text editor. You will need to change this to point
to your own 'mac' directory.

The very last line of Copy/simulationbatch1_.qsub needs to be changed
twice: the first path should point to the directory your Muon_GUORE
executable is in. The second path should point to your 'mac' folder.


1. >)make //Builds the Muon_GUORE executable out of the source codes

//Change to the renamed instance of the Copy directory

2. >)root -x jobsubmit.C //takes 100 seconds to run

//Dependencies of step 2: simulationbatch1_.qsub,
Muon_GUORE (the executable), weighted.mac

//Simulations can take up to 24 hours, depending on whether or not the
rock has been removed from the simulation geometry. This is an
advanced setting and beyond the scope of this manual. By default the
rock is included.

//After all simulations finish in 24 or so hours...

3. >)root -x manysubmit.C //takes 900 seconds to run

//Dependencies of step 3: manysub.qsub, neweventbuilder.C,
simulation output files

//Event building can also take up to 24 hours. If you're ever worried
it's taking too long or stuck processing, try the following command:

3a. >) tail -100 manysub-outto

//This should show some numbers tracking the progress of the event
builder. Read the source file if you wanna know what these numbers
are. All you need to know right now is that if you run the same
command 10 minutes later and the numbers have changed at all, the
event builder is still advancing.

//Once all the events are built...

4. >)root -x summing.C

//Dependencies of step 4: having event builder output files

In my experience, 1-2% of event builder output files are
corrupted. This will be VERY obvious when you try to run summing.C on
them. Fortunately, I set up summing.C to output the name of each file
it's about to try to process, so if you suddenly get a huge number of
errors on your terminal just scroll up until you find the name of the
last file that the summing script tried to process. Then, you can move
or delete this corrupted built file, delete any output files from the
summing script, and simply run it again. This solution is not very
elegant but it works for now.

5. (optional) >)root -x chaining.C

//Dependencies of step 5: having summed output files

Stay tuned for analysis programs!



Below are the names and functions of the other programs appearing in
the mac directory. These programs are either old and nonfunctional,
specialized, or both, so it's likely anybody reading this but me will
never have to use them. Even so, extra documentation doesn't hurt.

accessralphmuonfile.C - Pretty descriptive. Just a specialized program
I made to access the large file of simulated muons Ralph gave me,
arrange the parameters in a way that Geant4 likes, and then output
them to a smaller version of Ralph's muon file, which I named
SmallMuonFile.root.

angulardistributionsofsmallmuonfile.C - The name speaks for itself. Accesses SmallMuonFile.root, calculates angular distributions of the muons, and plots them.

bigsimsnoangle.root - A particularly large simulation file, from back in the days when I would run 100,000 muons at a time instead of 100. This was made with unrealistic parameters and so is not an accurate simulation, but I saved it because it might be useful for testing out runtime of programs.

heatmap.C - Old analysis program I used to use to plot the starting z position of shower secondaries that hit the detectors versus the name of the process which created them. These plots were pretty and informative, so I'll probably reimplement this at some point during the analysis phase.

Muonbackground_shielding.root - Name of Ralph's muon file, referenced heavily elsewhere in this manual.

nucleardelayinfo.C - Another fledgling analysis program, designed to record information about particles produced from delayed nuclear decays which find their way to a sensitive detector mass.

specificcreatorprocess.C - An analysis program which allows me to search for specific creator processes in the simulation outputs. In its early stages as well, but at least functional.
